{
  "scopeName": "text.apl",
  "comment": "APL Agentic Prompting Language",
  "fileTypes": ["apl"],
  "foldingStartMarker": "({%\\s*(block|filter|for|if|macro|raw))|^\\s*(if|for|with|set)\\b",
  "foldingStopMarker": "({%\\s*(endblock|endfilter|endfor|endif|endmacro|endraw)\\s*%})|^\\s*(endif|endfor|endwith|endset)\\b",
  "patterns": [
    { "include": "#mdBlock" },
    { "include": "#aplDirectives" },
    { "include": "#jinjaDelimited" },
    { "include": "#relaxedSyntaxGlobal" },
    { "include": "#comments" },
    {
      "begin": "({%)\\s*(raw)\\s*(%})",
      "captures": {
        "1": {
          "name": "entity.other.jinja.delimiter.tag"
        },
        "2": {
          "name": "keyword.control.jinja"
        },
        "3": {
          "name": "entity.other.jinja.delimiter.tag"
        }
      },
      "end": "({%)\\s*(endraw)\\s*(%})",
      "name": "comment.block.jinja.raw"
    },
    {
      "begin": "{#-?",
      "captures": [
        {
          "name": "entity.other.jinja.delimiter.comment"
        }
      ],
      "end": "-?#}",
      "name": "comment.block.jinja"
    },
    {
      "begin": "{{-?",
      "captures": [
        {
          "name": "entity.name.function.apl"
        }
      ],
      "end": "-?}}",
      "endCaptures": [
        {
          "name": "entity.name.function.apl"
        }
      ],
      "name": "meta.scope.jinja.variable",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    {
      "begin": "{%-?",
      "captures": [
        {
          "name": "entity.name.function.apl"
        }
      ],
      "end": "-?%}",
      "endCaptures": [
        {
          "name": "entity.name.function.apl"
        }
      ],
      "name": "meta.scope.jinja.tag",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    }
  ],
  "repository": {
    "aplDirectives": {
      "patterns": [
        {
          "match": "^(@)(image_url|audio_input|file)(\\s+)(https://\\S+)\\s*$",
          "name": "meta.directive.apl",
          "captures": {
            "1": { "name": "keyword.control.jinja" },
            "2": { "name": "keyword.control.jinja" },
            "3": { "name": "text.apl" },
            "4": { "name": "markup.underline.link.apl" }
          }
        }
      ]
    },
    "prePostPhase": {
      "begin": "^#\\s+(pre|post)\\s*:",
      "beginCaptures": {
        "0": { "name": "heading.1.markdown" },
        "1": { "name": "keyword.control.apl.phase" }
      },
      "end": "(?=^#\\s+)",
      "name": "meta.apl.phase.pre-post",
      "patterns": [{ "include": "#relaxedSyntax" }]
    },
    "relaxedSyntax": {
      "patterns": [
        {
          "match": "^\\s*(if|elif|else|endif|for|endfor|set|endset|with|endwith)\\b",
          "name": "keyword.control.jinja"
        },
        {
          "match": "\\b(set_context|get_context|call_tool)\\b",
          "name": "entity.name.function.apl"
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.jinja" }
          }
        },
        {
          "match": "\\b(and|or|not|in|is)\\b",
          "name": "keyword.operator.logical.jinja"
        },
        {
          "match": "\\b(true|false|none|null)\\b",
          "name": "constant.language.jinja"
        },
        {
          "match": "\\b(prev_step|next_step|result_text|result_json|result_tool_calls|result_image_urls|result_audio_inputs|result_files|result_role|usage|runs|global_runs|time_elapsed|time_elapsed_global|errors|prompts|tools|context|context_history|model|temperature|allowed_tools|output_mode|output_structure|max_tokens|top_p|presence_penalty|frequency_penalty|top_k|repetition_penalty|stop_sequences|seed|logit_bias)\\b",
          "name": "variable.language.apl"
        },
        {
          "match": "\\b(range|len|str|int|float|list|dict|lower|upper)\\b",
          "name": "support.function.builtin.python"
        },
        {
          "match": "(==|!=|<=|>=|<|>)",
          "name": "keyword.operator.comparison.jinja"
        },
        {
          "match": "(\\+|\\-|\\*|/|%|=)",
          "name": "keyword.operator.arithmetic.jinja"
        },
        {
          "begin": "'",
          "beginCaptures": [
            { "name": "punctuation.definition.string.begin.jinja" }
          ],
          "end": "'",
          "endCaptures": [
            { "name": "punctuation.definition.string.end.jinja" }
          ],
          "name": "string.quoted.single.jinja",
          "patterns": [{ "include": "#string" }]
        },
        {
          "begin": "\"",
          "beginCaptures": [
            { "name": "punctuation.definition.string.begin.jinja" }
          ],
          "end": "\"",
          "endCaptures": [
            { "name": "punctuation.definition.string.end.jinja" }
          ],
          "name": "string.quoted.double.jinja",
          "patterns": [{ "include": "#string" }]
        },
        {
          "match": "\\b\\d+(\\.\\d+)?\\b",
          "name": "constant.numeric.jinja"
        },
        {
          "match": "(\\|)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "punctuation.other.jinja" },
            "2": { "name": "entity.name.function.jinja" }
          }
        },
        {
          "match": "\\b[a-zA-Z_][a-zA-Z0-9_]*\\b",
          "name": "variable.language.apl"
        },
        {
          "match": "[\\(\\)\\[\\],\\.]",
          "name": "punctuation.jinja"
        }
      ]
    },
    "relaxedSyntaxGlobal": {
      "patterns": [
        {
          "match": "^\\s*(if|elif|else|endif|for|endfor|set|endset|with|endwith)\\b",
          "captures": {
            "1": { "name": "keyword.control.jinja" }
          }
        },
        {
          "match": "\\b(set_context|get_context|call_tool|inc_context)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.apl" }
          }
        },
        {
          "match": "([a-zA-Z_][a-zA-Z0-9_]*)\\s*\\(",
          "captures": {
            "1": { "name": "entity.name.function.jinja" }
          }
        },
        {
          "match": "\\b(range|len|str|int|float|list|dict|lower|upper)\\s*\\(",
          "captures": {
            "1": { "name": "support.function.builtin.python" }
          }
        },
        {
          "match": "'[^']*'",
          "name": "string.quoted.single.jinja"
        },
        {
          "match": "\"[^\"]*\"",
          "name": "string.quoted.double.jinja"
        },
        {
          "match": "\\b\\d+(\\.\\d+)?\\b",
          "name": "constant.numeric.jinja"
        },
        {
          "match": "\\b(prev_step|next_step|result_text|result_json|result_tool_calls|result_image_urls|result_audio_inputs|result_files|result_role|usage|runs|global_runs|time_elapsed|time_elapsed_global|errors|prompts|tools|context|context_history|model|temperature|allowed_tools|output_mode|output_structure|max_tokens|top_p|presence_penalty|frequency_penalty|top_k|repetition_penalty|stop_sequences|seed|logit_bias|result)\\b",
          "name": "variable.language.apl"
        },
        {
          "match": "(\\|)\\s*([a-zA-Z_][a-zA-Z0-9_]*)",
          "captures": {
            "1": { "name": "punctuation.other.jinja" },
            "2": { "name": "entity.name.function.jinja" }
          }
        },
        {
          "match": "\\b(true|false|none|null)\\b",
          "name": "constant.language.jinja"
        },
        {
          "match": "\\b(and|or|not|in|is)\\b",
          "name": "keyword.operator.logical.jinja"
        },
        {
          "match": "(==|!=|<=|>=|<|>)",
          "name": "keyword.operator.comparison.jinja"
        },
        {
          "match": "(\\+|\\-|\\*|/|%|=)",
          "name": "keyword.operator.arithmetic.jinja"
        }
      ]
    },
    "comments": {
      "patterns": []
    },
    "jinjaDelimited": {
      "patterns": [
        {
          "begin": "{{-?",
          "captures": [{ "name": "entity.other.jinja.delimiter.variable" }],
          "end": "-?}}",
          "name": "meta.scope.jinja.variable",
          "patterns": [{ "include": "#expression" }]
        },
        {
          "begin": "{%-?",
          "captures": [{ "name": "entity.other.jinja.delimiter.tag" }],
          "end": "-?%}",
          "name": "meta.scope.jinja.tag",
          "patterns": [{ "include": "#expression" }]
        }
      ]
    },
    "mdBlock": {
      "patterns": [{ "include": "#mdHeading" }]
    },
    "mdHeading": {
      "match": "(?:^|\\G)[ ]{0,3}(#{1,6}\\s+(.*?)(\\s+#{1,6})?\\s*)$",
      "captures": {
        "1": {
          "patterns": [
            {
              "match": "(#{1})\\s+([Pp][Rr][Ee]|[Pp][Oo][Ss][Tt]|[Pp][Rr][Oo][Mm][Pp][Tt])\\s*:\\s*(.*?)(?:\\s+(#+))?\\s*$",
              "name": "heading.1.markdown.apl",
              "captures": {
                "1": { "name": "punctuation.definition.heading.markdown" },
                "2": { "name": "keyword.control.apl.phase" },
                "3": { "name": "entity.name.section.apl.step-name" },
                "4": { "name": "punctuation.definition.heading.markdown" }
              }
            },
            {
              "match": "(#{2})\\s+(system|user|assistant|developer)(?:\\s+(#+))?\\s*$",
              "name": "heading.2.markdown.apl.role",
              "captures": {
                "1": { "name": "punctuation.definition.heading.markdown" },
                "2": { "name": "entity.name.type.apl.role" },
                "3": { "name": "punctuation.definition.heading.markdown" }
              }
            },
            {
              "match": "(#{2})\\s+(.*?)(?:\\s+(#+))?\\s*$",
              "name": "heading.2.markdown",
              "captures": {
                "1": { "name": "punctuation.definition.heading.markdown" },
                "2": {
                  "name": "entity.name.section.markdown",
                  "patterns": [{ "include": "text.apl" }]
                },
                "3": { "name": "punctuation.definition.heading.markdown" }
              }
            },
            {
              "match": "(#{1})\\s+(.*?)(?:\\s+(#+))?\\s*$",
              "name": "heading.1.markdown",
              "captures": {
                "1": { "name": "punctuation.definition.heading.markdown" },
                "2": {
                  "name": "entity.name.section.markdown",
                  "patterns": [{ "include": "text.apl" }]
                },
                "3": { "name": "punctuation.definition.heading.markdown" }
              }
            }
          ]
        }
      },
      "name": "markup.heading.markdown"
    },
    "escaped_char": {
      "match": "\\\\x[0-9A-F]{2}",
      "name": "constant.character.escape.hex.jinja"
    },
    "escaped_unicode_char": {
      "captures": {
        "1": {
          "name": "constant.character.escape.unicode.16-bit-hex.jinja"
        },
        "2": {
          "name": "constant.character.escape.unicode.32-bit-hex.jinja"
        },
        "3": {
          "name": "constant.character.escape.unicode.name.jinja"
        }
      },
      "match": "(\\\\U[0-9A-Fa-f]{8})|(\\\\u[0-9A-Fa-f]{4})|(\\\\N\\{[a-zA-Z ]+\\})"
    },
    "expression": {
      "patterns": [
        {
          "captures": {
            "1": {
              "name": "keyword.control.jinja"
            },
            "2": {
              "name": "variable.language.apl"
            }
          },
          "match": "\\s*\\b(block)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.jinja"
            },
            "2": {
              "name": "variable.language.apl"
            }
          },
          "match": "\\s*\\b(filter)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.jinja"
            },
            "2": {
              "name": "variable.language.apl"
            }
          },
          "match": "\\s*\\b(is)\\s+([a-zA-Z_][a-zA-Z0-9_]*)\\b"
        },
        {
          "captures": {
            "1": {
              "name": "keyword.control.jinja"
            }
          },
          "match": "(?<=\\{\\%-|\\{\\%)\\s*\\b([a-zA-Z_][a-zA-Z0-9_]*)\\b(?!\\s*[,=])"
        },
        {
          "match": "\\b(and|else|if|in|import|not|or|recursive|with(out)?\\s+context)\\b",
          "name": "keyword.control.jinja"
        },
        {
          "match": "\\b(true|false|none)\\b",
          "name": "constant.language.jinja"
        },
        {
          "match": "\\b(loop|super|self|varargs|kwargs)\\b",
          "name": "variable.language.jinja"
        },
        {
          "match": "[a-zA-Z_][a-zA-Z0-9_]*",
          "name": "variable.language.apl"
        },
        {
          "match": "(\\+|\\-|\\*\\*|\\*|//|/|%)",
          "name": "keyword.operator.arithmetic.jinja"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.other.jinja"
            },
            "2": {
              "name": "entity.name.function.jinja"
            }
          },
          "match": "(\\|)\\s*([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "captures": {
            "1": {
              "name": "punctuation.other.jinja"
            },
            "2": {
              "name": "variable.language.apl"
            }
          },
          "match": "(\\.)([a-zA-Z_][a-zA-Z0-9_]*)"
        },
        {
          "begin": "\\[",
          "captures": [
            {
              "name": "punctuation.other.jinja"
            }
          ],
          "end": "\\]",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\(",
          "captures": [
            {
              "name": "punctuation.other.jinja"
            }
          ],
          "end": "\\)",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "begin": "\\{",
          "captures": [
            {
              "name": "punctuation.other.jinja"
            }
          ],
          "end": "\\}",
          "patterns": [
            {
              "include": "#expression"
            }
          ]
        },
        {
          "match": "(\\.|:|\\||,)",
          "name": "punctuation.other.jinja"
        },
        {
          "match": "(==|<=|=>|<|>|!=)",
          "name": "keyword.operator.comparison.jinja"
        },
        {
          "match": "=",
          "name": "keyword.operator.assignment.jinja"
        },
        {
          "begin": "\"",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.jinja"
            }
          ],
          "end": "\"",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.jinja"
            }
          ],
          "name": "string.quoted.double.jinja",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "begin": "'",
          "beginCaptures": [
            {
              "name": "punctuation.definition.string.begin.jinja"
            }
          ],
          "end": "'",
          "endCaptures": [
            {
              "name": "punctuation.definition.string.end.jinja"
            }
          ],
          "name": "string.quoted.single.jinja",
          "patterns": [
            {
              "include": "#string"
            }
          ]
        },
        {
          "begin": "@/",
          "beginCaptures": [
            {
              "name": "punctuation.definition.regexp.begin.jinja"
            }
          ],
          "end": "/",
          "endCaptures": [
            {
              "name": "punctuation.definition.regexp.end.jinja"
            }
          ],
          "name": "string.regexp.jinja",
          "patterns": [
            {
              "include": "#simple_escapes"
            }
          ]
        }
      ]
    },
    "simple_escapes": {
      "captures": {
        "1": {
          "name": "constant.character.escape.newline.jinja"
        },
        "10": {
          "name": "constant.character.escape.tab.jinja"
        },
        "11": {
          "name": "constant.character.escape.vertical-tab.jinja"
        },
        "2": {
          "name": "constant.character.escape.backlash.jinja"
        },
        "3": {
          "name": "constant.character.escape.double-quote.jinja"
        },
        "4": {
          "name": "constant.character.escape.single-quote.jinja"
        },
        "5": {
          "name": "constant.character.escape.bell.jinja"
        },
        "6": {
          "name": "constant.character.escape.backspace.jinja"
        },
        "7": {
          "name": "constant.character.escape.formfeed.jinja"
        },
        "8": {
          "name": "constant.character.escape.linefeed.jinja"
        },
        "9": {
          "name": "constant.character.escape.return.jinja"
        }
      },
      "match": "(\\\\\\n)|(\\\\\\\\)|(\\\\\\\")|(\\\\')|(\\\\a)|(\\\\b)|(\\\\f)|(\\\\n)|(\\\\r)|(\\\\t)|(\\\\v)"
    },
    "string": {
      "patterns": [
        {
          "include": "#simple_escapes"
        },
        {
          "include": "#escaped_char"
        },
        {
          "include": "#escaped_unicode_char"
        }
      ]
    }
  }
}
